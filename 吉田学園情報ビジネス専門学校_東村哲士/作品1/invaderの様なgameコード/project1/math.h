#ifndef MATH_H
#define MATH_H

#include "main.h"
#include "manager.h"
#include "input.h"
#include "scene2D.h"
#include "object.h"
#include "CreateStage.h"

#define FALSE_ADD (0)

class CMath {
public:
	static CCreateStage::ENEMYDATE GetEnemyDate(D3DXVECTOR3 pos, CManager::PRIORITY nPriority,
												D3DXVECTOR2 n01 = D3DXVECTOR2(2, 2), D3DXVECTOR2 n02 = D3DXVECTOR2(2, 2),
												D3DXVECTOR2 n03 = D3DXVECTOR2(2, 2), D3DXVECTOR2 n04 = D3DXVECTOR2(2, 2),
												D3DXVECTOR2 nAdd01 = D3DXVECTOR2(FALSE_ADD , FALSE_ADD), D3DXVECTOR2 nAdd02 = D3DXVECTOR2(FALSE_ADD, FALSE_ADD),
												D3DXVECTOR2 nAdd03 = D3DXVECTOR2(FALSE_ADD, FALSE_ADD), D3DXVECTOR2 nAdd04 = D3DXVECTOR2(FALSE_ADD, FALSE_ADD));

	static bool GetOverlapJudge(D3DXVECTOR3 pos, CManager::PRIORITY nPriority,
								D3DXVECTOR2 n01 = D3DXVECTOR2(2, 2), D3DXVECTOR2 n02 = D3DXVECTOR2(2, 2),
								D3DXVECTOR2 n03 = D3DXVECTOR2(2, 2), D3DXVECTOR2 n04 = D3DXVECTOR2(2, 2),
								D3DXVECTOR2 nAdd01 = D3DXVECTOR2(FALSE_ADD, FALSE_ADD), D3DXVECTOR2 nAdd02 = D3DXVECTOR2(FALSE_ADD, FALSE_ADD),
								D3DXVECTOR2 nAdd03 = D3DXVECTOR2(FALSE_ADD, FALSE_ADD), D3DXVECTOR2 nAdd04 = D3DXVECTOR2(FALSE_ADD, FALSE_ADD));

	static bool CollisionDetection(D3DXVECTOR3 pos01, D3DXVECTOR3 pos02, D3DXVECTOR3 siz01, D3DXVECTOR3 siz02,
								   D3DXVECTOR2 n01 = D3DXVECTOR2(2, 2), D3DXVECTOR2 n02 = D3DXVECTOR2(2, 2),
								   D3DXVECTOR2 n03 = D3DXVECTOR2(2, 2), D3DXVECTOR2 n04 = D3DXVECTOR2(2, 2),
								   D3DXVECTOR2 nAdd01 = D3DXVECTOR2(FALSE_ADD, FALSE_ADD), D3DXVECTOR2 nAdd02 = D3DXVECTOR2(FALSE_ADD, FALSE_ADD),
								   D3DXVECTOR2 nAdd03 = D3DXVECTOR2(FALSE_ADD, FALSE_ADD), D3DXVECTOR2 nAdd04 = D3DXVECTOR2(FALSE_ADD, FALSE_ADD));

	static bool CircularityJudgment(D3DXVECTOR3 siz01, D3DXVECTOR3 siz02, 
									D3DXVECTOR3 pos01 = D3DXVECTOR3(FALSE_MOVEMENT, FALSE_MOVEMENT, 0), D3DXVECTOR3 pos02 = D3DXVECTOR3(FALSE_MOVEMENT, FALSE_MOVEMENT, 0));

	static CObject* GetObjectDate(D3DXVECTOR3 pos, CManager::PRIORITY nPriority,
								  D3DXVECTOR2 n01 = D3DXVECTOR2(2, 2), D3DXVECTOR2 n02 = D3DXVECTOR2(2, 2),
								  D3DXVECTOR2 n03 = D3DXVECTOR2(2, 2), D3DXVECTOR2 n04 = D3DXVECTOR2(2, 2),
								  D3DXVECTOR2 nAdd01 = D3DXVECTOR2(FALSE_ADD, FALSE_ADD), D3DXVECTOR2 nAdd02 = D3DXVECTOR2(FALSE_ADD, FALSE_ADD),
								  D3DXVECTOR2 nAdd03 = D3DXVECTOR2(FALSE_ADD, FALSE_ADD), D3DXVECTOR2 nAdd04 = D3DXVECTOR2(FALSE_ADD, FALSE_ADD));

private:
};

#endif