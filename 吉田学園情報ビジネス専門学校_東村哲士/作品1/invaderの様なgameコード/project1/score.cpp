//=============================================================================
//
// スコア処理 [score.cpp]
// Author : 佐藤 諒佳
//
//=============================================================================

//*****************************************************************************
// インクルードファイル
//*****************************************************************************
#include "score.h"
#include "manager.h"
#include "number.h"

//*****************************************************************************
// 静的メンバ変数宣言
//*****************************************************************************
int CScore::m_nScore = 0;

//=============================================================================
// コンストラクタ
//=============================================================================
CScore::CScore(int nPiority) : CObject(nPiority)
{

}

//=============================================================================
// デストラクタ
//=============================================================================
CScore::~CScore()
{

}

//=============================================================================
// クリエイト関数
//=============================================================================
CScore *CScore::Create()
{
	CScore *pScore;
	pScore = new CScore(CManager::PRIORITY_SCORE);
	pScore->Init();
	return pScore;
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CScore::Init()
{
	for (int nCount = 0; nCount < MAX_SCORE; nCount++)
	{
		m_apNumber[nCount] = CNumber::Create(D3DXVECTOR3(SCORE_WIDTH + nCount * 25, 20.0f, 0.0f), D3DXVECTOR3(NUMBER_WIDTH, NUMBER_HEIGHT, 0));
	}
	// スコアを0に初期化
	m_nScore = 0;
	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CScore::Uninit(void)
{
	for (int nCount = 0; nCount < MAX_SCORE; nCount++)
	{
		if (m_apNumber[nCount] != NULL)
		{
			m_apNumber[nCount]->Uninit();

			delete m_apNumber[nCount];
			m_apNumber[nCount] = NULL;
		}
	}

	Release();
}

//=============================================================================
// 更新処理
//=============================================================================
void CScore::Update(void)
{
	for (int nCount = 0; nCount < MAX_SCORE; nCount++)
	{
		m_apNumber[nCount]->Update();
	}
}

//=============================================================================
// 描画処理
//=============================================================================
void CScore::Draw(void)
{
	for (int nCount = 0; nCount < MAX_SCORE; nCount++)
	{
		m_apNumber[nCount]->Draw();
	}
}

//=============================================================================
// スコアのセット
//=============================================================================
void CScore::SetScore(int nScore)
{
	m_nScore = nScore;
	for (int nCount = 0; nCount < MAX_SCORE; nCount++)
	{
		m_apNumber[nCount]->SetNumber(m_nScore % (int)powf(10, MAX_SCORE - nCount) / (int)powf(10, MAX_SCORE - nCount - 1));
	}
}

//=============================================================================
// スコアの加算
//=============================================================================
void CScore::AddScore(int nValue)
{
	m_nScore += nValue;		// 代入
	for (int nCount = 0; nCount < MAX_SCORE; nCount++)
	{
		m_apNumber[nCount]->SetNumber(m_nScore % (int)powf(10, MAX_SCORE - nCount) / (int)powf(10, MAX_SCORE - nCount - 1));
	}
}